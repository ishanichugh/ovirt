#!/usr/bin/python
"""
This script is initial implementation of sorting logs by thread name.
"""
import datetime
#calendar.timegm(time.strptime("2017-02-23 10:57:37", "%Y-%m-%d %H:%M:%S"))
class VDSM(object):
    """Class of parsing VDSM log into thread based files"""
    def __init__(self, file_name):
        self.file_name = file_name

    def simplify(self):
        """
        Parses logs line by line and writes logs generated by same thread
        to respective file.
        """
        with open(self.file_name, 'r') as log_file:
            task_name = ""
            for log in log_file:
                task_name = self.prettify(self.get_task(log, task_name))
                path = "/tmp/"+task_name
                with open(path, 'aw') as fileptr:
                    fileptr.write(log)
                print task_name

    def get_task(self, log, task_name):
        """
        Extracts task name out of log line
        """
        stack = []
        for index in range(0, len(log)):
            try:
                datetime.datetime.strptime(log.split()[0], '%Y-%m-%d') #same work as regex
            except ValueError:
                return task_name

            if log[index] == '(':
                stack.append(index)
            elif log[index] == ')':
                if len(stack) == 1:
                    return log[stack[0]+1:index]
                stack.pop()
        raise Exception('No Task_name Found')

    def prettify(self, task_name):
        """
        Converts the Thread name into a valid file name.
        """
        file_name = ""
        for index in range(len(task_name)):
            c = task_name[index]
            if (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z') or (c >= '0' and c <= '9') or c == '(' or c == ')':
                file_name += c
            else:
                file_name += '_'
        return file_name

# if __name__ == '__main__':
#     file_name = sys.argv[1]
#     file1 = VDSM(file_name)
#     file1.simplify()
        